#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste das Melhorias na Limpeza de Pontua√ß√£o
=============================================

Este script testa a nova fun√ß√£o limpar_texto() que resolve o problema
de TTS falando "ponto" literalmente, mas preserva a entona√ß√£o natural.
"""

import re
import sys
import os

# Importar a fun√ß√£o melhorada
sys.path.append(os.path.dirname(__file__))
from usar_minha_voz import limpar_texto

def testar_casos_pontuacao():
    """Testa diferentes casos problem√°ticos de pontua√ß√£o"""
    
    print("=" * 70)
    print("TESTE DAS MELHORIAS NA LIMPEZA DE PONTUA√á√ÉO")
    print("=" * 70)
    print()
    print("üéØ OBJETIVO: Evitar que TTS fale 'ponto' mas manter entona√ß√£o natural")
    print()
    
    # Casos de teste
    casos_teste = [
        {
            'titulo': 'Frases com pontos finais (problema principal)',
            'textos': [
                'Ol√° professora. Como est√°?',
                'Entendi a mat√©ria. Muito obrigado.',
                'A resposta est√° certa. Parab√©ns pela explica√ß√£o.',
                'Isso √© muito interessante. Vou estudar mais sobre isso.'
            ]
        },
        {
            'titulo': 'Abrevia√ß√µes importantes (devem ser preservadas)',
            'textos': [
                'Dr. Jo√£o √© m√©dico.',
                'A Profa. Maria ensina matem√°tica.',
                'Sr. Silva, etc.',
                'Por exemplo, vs. outras op√ß√µes.'
            ]
        },
        {
            'titulo': 'Retic√™ncias problem√°ticas (devem ser removidas)',
            'textos': [
                'Bem... como posso explicar...',
                'Isso √©....... complicado.',
                'Ent√£o.... vamos ver....',
                'Humm‚Ä¶ interessante‚Ä¶'
            ]
        },
        {
            'titulo': 'Frases sem pontua√ß√£o final (precisam de pausa)',
            'textos': [
                'Obrigado pela aula',
                '√ìtima explica√ß√£o',
                'Entendi perfeitamente',
                'Muito bom mesmo'
            ]
        },
        {
            'titulo': 'Textos com emojis e caracteres especiais',
            'textos': [
                'Muito bom! üòä Adorei a explica√ß√£o.',
                'Perfeito... üëç Assim fica mais claro.',
                'Obrigado! üôè Entendi tudo.',
                'Excelente!! ‚≠ê Parab√©ns.'
            ]
        },
        {
            'titulo': 'Casos mistos complexos',
            'textos': [
                'Dr. Silva disse: "A interpreta√ß√£o est√° correta." Concordo.',
                'Profa. Ana explicou etc... Foi muito √∫til.',
                'O Sr. Jo√£o, por ex., sempre ajuda. Obrigado.',
                'Isso significa... bem... que entendi. Perfeito.'
            ]
        }
    ]
    
    total_casos = 0
    total_melhorias = 0
    
    for categoria in casos_teste:
        print(f"\nüìã {categoria['titulo'].upper()}")
        print("-" * len(categoria['titulo']) + "---")
        
        for texto_original in categoria['textos']:
            total_casos += 1
            texto_limpo = limpar_texto(texto_original)
            
            # An√°lise das melhorias
            tem_ponto_original = '.' in texto_original
            tem_ponto_limpo = '.' in texto_limpo
            tem_virgula_final = texto_limpo.strip().endswith(',')
            tem_pausa = ', ' in texto_limpo or ' ,' in texto_limpo
            
            print(f"\n  üìù Original: '{texto_original}'")
            print(f"  ‚ú® Limpo:    '{texto_limpo}'")
            
            melhorias = []
            if tem_ponto_original and not tem_ponto_limpo:
                melhorias.append("pontos removidos")
                total_melhorias += 1
            if tem_virgula_final:
                melhorias.append("pausa final adicionada")
            if tem_pausa:
                melhorias.append("pausas internas preservadas")
            
            if melhorias:
                print(f"  üîß Melhorias: {', '.join(melhorias)}")
            
            # Verificar se ainda h√° pontos (poss√≠vel problema)
            if '.' in texto_limpo and ',' not in texto_limpo:
                print(f"  ‚ö†Ô∏è  ATEN√á√ÉO: Ainda cont√©m pontos que podem causar problema")
    
    # Resumo final
    print("\n" + "=" * 70)
    print("RESUMO DOS TESTES")
    print("=" * 70)
    print(f"Total de casos testados: {total_casos}")
    print(f"Casos com melhorias aplicadas: {total_melhorias}")
    print(f"Taxa de sucesso: {(total_melhorias/total_casos*100):.1f}%")
    print()
    print("üéØ PRINCIPAIS MELHORIAS IMPLEMENTADAS:")
    print("   ‚úÖ Substitui pontos finais por v√≠rgulas (mant√©m entona√ß√£o)")
    print("   ‚úÖ Preserva abrevia√ß√µes importantes (Dr., Prof., etc.)")
    print("   ‚úÖ Remove retic√™ncias problem√°ticas")
    print("   ‚úÖ Adiciona pausas naturais onde necess√°rio")
    print("   ‚úÖ Evita que TTS fale 'ponto' literalmente")
    print("   ‚úÖ Mant√©m entona√ß√£o natural das frases")

def demonstrar_antes_depois():
    """Demonstra a diferen√ßa entre fun√ß√£o antiga e nova"""
    
    print("\n" + "=" * 70)
    print("COMPARA√á√ÉO: FUN√á√ÉO ANTIGA vs. NOVA")
    print("=" * 70)
    
    def limpar_texto_antigo(texto):
        """Vers√£o antiga (problem√°tica)"""
        # Padr√£o para detectar emojis
        padrao_emoji = re.compile("["
            u"\U0001F600-\U0001F64F"
            u"\U0001F300-\U0001F5FF"
            u"\U0001F680-\U0001F6FF"
            u"\U0001F1E0-\U0001F1FF"
            u"\U00002702-\U000027B0"
            u"\U000024C2-\U0001F251"
            "]+", flags=re.UNICODE)
        
        texto_limpo = padrao_emoji.sub('', texto)
        texto_limpo = ' '.join(texto_limpo.split())
        texto_limpo = texto_limpo.replace('...', '')
        texto_limpo = texto_limpo.replace('..', '')
        texto_limpo = texto_limpo.replace('.', '')  # PROBLEMA: Remove TODOS os pontos
        texto_limpo = re.sub(r'\s+([,!?])', r'\1', texto_limpo)
        return texto_limpo.strip()
    
    exemplos_problematicos = [
        'Boa explica√ß√£o. Muito obrigado.',
        'Dr. Silva est√° certo. Concordo.',
        'Entendi tudo... Perfeito.',
        'A resposta √© 42. Fim.'
    ]
    
    for exemplo in exemplos_problematicos:
        antigo = limpar_texto_antigo(exemplo)
        novo = limpar_texto(exemplo)
        
        print(f"\nüìù Texto original: '{exemplo}'")
        print(f"‚ùå Fun√ß√£o antiga:  '{antigo}'  (frase incompleta/sem entona√ß√£o)")
        print(f"‚úÖ Fun√ß√£o nova:    '{novo}'  (mant√©m entona√ß√£o natural)")
        
        # An√°lise
        if not antigo.endswith((',', '!', '?', ':')) and not antigo.endswith(' '):
            print("   üö® PROBLEMA ANTIGO: Frase termina abruptamente")
        
        if novo.endswith(',') or ', ' in novo:
            print("   ‚ú® SOLU√á√ÉO NOVA: Pausas naturais preservadas")

def testar_casos_especiais():
    """Testa casos especiais que podem ser problem√°ticos"""
    
    print("\n" + "=" * 70)
    print("TESTE DE CASOS ESPECIAIS")
    print("=" * 70)
    
    casos_especiais = [
        'N√∫meros decimais: 3.14 e 2.5 s√£o importantes.',
        'URLs: visite www.exemplo.com.br para mais info.',
        'Hor√°rios: √†s 14.30h teremos a aula.',
        'Vers√µes: Python 3.8.5 √© recomendado.',
        'M√∫ltiplas frases: Primeira frase. Segunda frase. Terceira frase.'
    ]
    
    print("‚ö†Ô∏è  Estes casos podem precisar de aten√ß√£o especial:")
    
    for caso in casos_especiais:
        resultado = limpar_texto(caso)
        print(f"\nüìù Original: '{caso}'")
        print(f"üîÑ Resultado: '{resultado}'")
        
        # Verificar se h√° elementos que podem precisar de tratamento especial
        if any(char.isdigit() for char in caso) and '.' in caso:
            print("   ‚ÑπÔ∏è  Cont√©m n√∫meros decimais - verificar se faz sentido")
        
        if 'www.' in caso or '.com' in caso:
            print("   ‚ÑπÔ∏è  Cont√©m URL - pode precisar tratamento especial")

def main():
    """Fun√ß√£o principal do teste"""
    try:
        print("üöÄ Iniciando testes da fun√ß√£o limpar_texto() melhorada...")
        
        # Executar todos os testes
        testar_casos_pontuacao()
        demonstrar_antes_depois()
        testar_casos_especiais()
        
        print("\n" + "=" * 70)
        print("‚úÖ TESTES CONCLU√çDOS COM SUCESSO!")
        print("=" * 70)
        print()
        print("üí° PR√ìXIMOS PASSOS:")
        print("   1. Teste a fun√ß√£o com seus pr√≥prios textos")
        print("   2. Execute o TTS e verifique se n√£o fala mais 'ponto'")
        print("   3. Confirme que a entona√ß√£o continua natural")
        print("   4. Ajuste casos especiais se necess√°rio")
        print()
        print("üéØ Para usar a fun√ß√£o melhorada:")
        print("   from usar_minha_voz import limpar_texto")
        print("   texto_limpo = limpar_texto('Seu texto aqui.')")
        
    except Exception as e:
        print(f"\n‚ùå ERRO durante os testes: {e}")
        print("Verifique se o arquivo usar_minha_voz.py est√° acess√≠vel")

if __name__ == "__main__":
    main() 